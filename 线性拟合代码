#设置样本容量为30，x服从正态分布（均值为3，方差为4），y=1+2x+e，e服从正态分布（均值为0，方差为9）。
#拟合回归直线，并绘制样本数据。
import numpy as np
import matplotlib.pyplot as plt

#设置样本容量
N = 30

#生成样本数据
# x = np.random.normal(3, 4, N)
# e = np.random.normal(0, 9, N)
# y = 1 + 2*x + e
x=[ 0.75750227,1.62178892,4.32920665,8.222671,-3.37389174,2.54698894,0.46393982,     -0.22978901, -1.25831374,1.43674897,3.23956891,-0.3872379,-1.49580227 ,7.92717536,0.33425606,     1.19361085,2.87222331,5.23052726,-1.9031796, 3.53301373,-4.0043818, 6.59295842 ,5.62884572,-5.22577878 ,6.67290418,11.14503723]
y=[-1.71699343,2.00165764,8.67621136,13.34481887,-12.48324093,16.54008335,2.46927865,-4.8299801,-5.90916507,-3.95779024 ,10.47272833,-3.43550785, 9.58720918,18.91635372 ,6.60814922,11.73840294,9.70448012,23.1356309,-5.51227506,8.01606961,-2.06899914,27.12322063 ,16.31217137,-15.46337305 ,20.57676273, 17.4035842]
# # 去除偏差最大的数
# max_y = max(y)
# index = y.index(max_y)
# x.pop(index)
# y.pop(index)
# 计算z=2x+1
z= [2 * value + 1 for value in x]
# 计算回归系数
slope, intercept = np.polyfit(x, y, 1)
q= [slope * value + intercept for value in x]
print('slope1:', slope)
print('intercept1:', intercept)

#绘制散点图
#绘制拟合的线性回归曲线


plt.title('Linear Regression')
plt.plot(x, z, '-')
# 绘制拟合曲线
plt.plot(x, q, color='red')
plt.scatter(x, y)
plt.xlabel('x')
plt.ylabel('y')

plt.show()
# 第一版随机数
# slope1: 1.619465826628148
# intercept1: 2.9797475108030107
# 第二版去除偏差最大的数之后的随机数据拟合的结果
# slope1: 1.6317411267851458
# intercept1: 2.3404758799521255
